plugins {
    id 'java-library'
    id 'io.spring.dependency-management'
    id 'org.openapi.generator'
}

group = "$projectGroup"
version = "$projectVersion"

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    }
    dependencies {
        dependency("com.google.code.findbugs:jsr305:$jsr305Version")
        dependency("org.javamoney:moneta:$monetaVersion")
        dependency("net.datafaker:datafaker:$datafakerVersion")
    }
}

dependencies {
    api(project(':libraries:base'))
    api(project(':libraries:modulemesh'))
    api(project(':libraries:security'))
    api(project(':libraries:spring-extensions'))
    
    compileOnly('jakarta.servlet:jakarta.servlet-api')
    compileOnly('com.google.code.findbugs:jsr305')

    implementation('org.springframework:spring-context')
    implementation('org.springframework:spring-webmvc')
    implementation('org.springframework.data:spring-data-jdbc')
    implementation('com.fasterxml.jackson.core:jackson-annotations')
    implementation('org.javamoney:moneta')

    testImplementation('org.springframework:spring-test')
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.mockito:mockito-junit-jupiter')
    testImplementation('net.datafaker:datafaker')
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/${project.name}.0.0.oas.yaml"

    apiPackage = "coffeehouse.contracts.${project.name}.web"
    modelPackage = "coffeehouse.contracts.${project.name}.web.model"
    configOptions.set([
            "annotationLibrary"    : "none",
            "delegatePattern"      : "true",
            "documentationProvider": "none",
            "interfaceOnly"        : "true",
            "openApiNullable"      : "false",
            "useSpringBoot3"       : "true",
            "useSwaggerUI"         : "false",
    ])
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$buildDir/generate-resources/main/src/main/java"]
        }
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("$javaVersion"))
    }
}

tasks.withType(JavaCompile).configureEach {
    dependsOn(tasks.openApiGenerate)
    options.compilerArgs.add("-parameters")
    options.encoding = "$javaOptionEncoding"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
