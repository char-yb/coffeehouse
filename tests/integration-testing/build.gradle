plugins {
    id 'java'
    id 'io.spring.dependency-management'
}

group = "$projectGroup"
version = "$projectVersion"

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    }
    dependencies {
        dependency("com.google.code.findbugs:jsr305:$jsr305Version")
        dependency("org.javamoney:moneta:$monetaVersion")
        dependency("org.zalando:jackson-datatype-money:$jacksonDatatypeMoney")
        dependency("com.auth0:java-jwt:$auth0JavaJWTVersion")
    }
}

dependencies {
    testImplementation(project(':libraries:spring-data-extensions'))
    
    testImplementation(project(':modules:user'))
    testImplementation(project(':modules:catalog'))
    testImplementation(project(':modules:order'))
    testImplementation(project(':modules:brew'))
    
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.boot:spring-boot-starter-data-jdbc')
    testImplementation('org.springframework.boot:spring-boot-starter-json')
    testImplementation('org.springframework.boot:spring-boot-starter-integration')
    testImplementation('org.springframework.integration:spring-integration-jdbc')
    testImplementation('org.zalando:jackson-datatype-money')
    testImplementation('org.awaitility:awaitility')

    testCompileOnly('com.google.code.findbugs:jsr305')
    testRuntimeOnly('com.h2database:h2')
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("$javaVersion"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "$javaOptionEncoding"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showCauses = true
        showExceptions = true
        showStackTraces = false
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = false
    }    
}
